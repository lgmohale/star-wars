import { DocumentNode, GraphQLSchema } from 'graphql';
export declare class GraphQLLoaderError extends Error {
    static zeroMatchError(glob: string): GraphQLLoaderError;
    constructor(message: string);
}
export interface ISchemaCallback {
    (err: GraphQLLoaderError, schema: GraphQLSchema): any;
}
export interface ILoadSchemaFunc {
    (pattern: string, callback?: ISchemaCallback): Promise<GraphQLSchema>;
    sync?: (pattern: string) => GraphQLSchema;
}
export interface IGraphQLModule {
    document: DocumentNode;
    resolvers?: any;
}
export declare type IGraphQLModuleFunction = () => IGraphQLModule | Promise<IGraphQLModule>;
export declare const loadSchema: ILoadSchemaFunc;
export declare const loadDocument: (pattern: string) => Promise<DocumentNode>;
export declare const combineDocuments: (docs: DocumentNode[]) => GraphQLSchema;
export declare const executableSchemaFromModules: (modules: IGraphQLModule[] | IGraphQLModuleFunction[]) => Promise<GraphQLSchema>;
