"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const language_1 = require("graphql/language");
function combineASTTypes(types) {
    return types.reduce((p, n) => Object.assign(p, n, { fields: n.fields.concat(p.fields || []) }), {});
}
exports.combineASTTypes = combineASTTypes;
function combineASTSchemas(schemas) {
    const result = { kind: 'Document', definitions: [] };
    const queries = [], mutations = [], subscriptions = [];
    const withoutRootTypes = schemas.map(schema => language_1.visit(schema, {
        enter(node) {
            if (node.kind === 'ObjectTypeDefinition') {
                if (node.name.value == 'Query') {
                    queries.push(node);
                    return null;
                }
                else if (node.name.value == 'Mutation') {
                    mutations.push(node);
                    return null;
                }
                else if (node.name.value == 'Subscription') {
                    subscriptions.push(node);
                    return null;
                }
            }
        }
    }));
    const query = combineASTTypes(queries);
    const mutation = combineASTTypes(mutations);
    const subscription = combineASTTypes(subscriptions);
    if (queries.length)
        result.definitions.push(query);
    if (mutations.length)
        result.definitions.push(mutation);
    if (subscriptions.length)
        result.definitions.push(subscription);
    withoutRootTypes.forEach(schema => result.definitions = [...result.definitions, ...schema.definitions]);
    return graphql_1.buildASTSchema(result);
}
exports.combineASTSchemas = combineASTSchemas;
//# sourceMappingURL=combine.js.map